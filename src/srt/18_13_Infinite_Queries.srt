1
00:00:00,000 --> 00:00:06,000
Now

2
00:00:06,000 --> 00:00:10,000
let me show you how to implement infinite queries in react query.

3
00:00:10,000 --> 00:00:14,000
So we're going to add a button for loading more data.

4
00:00:14,000 --> 00:00:18,000
Now in real world applications we often want to load more data

5
00:00:18,000 --> 00:00:22,000
as the user scrolls down and reaches the bottom of the page.

6
00:00:22,000 --> 00:00:26,000
We'll look at that later in this section. So for now, let's leave out the complexity

7
00:00:26,000 --> 00:00:30,000
around scrolling and focus only on loading more data.

8
00:00:30,000 --> 00:00:34,000
So back to our hook, the first step is replacing

9
00:00:34,000 --> 00:00:38,000
use query with use infinite query.

10
00:00:38,000 --> 00:00:42,000
Let's import it on the top, good. Now when using an infinite

11
00:00:42,000 --> 00:00:46,000
query, we cannot use a state variable to keep

12
00:00:46,000 --> 00:00:50,000
track of the page number, because infinite queries handle pagination

13
00:00:50,000 --> 00:00:54,000
automatically and using a state variable to track the page number

14
00:00:54,000 --> 00:00:58,000
can lead to issues with the cache and data consistency.

15
00:00:58,000 --> 00:01:02,000
So let's remove this line, we should also remove page from

16
00:01:02,000 --> 00:01:06,000
this object and from our

17
00:01:06,000 --> 00:01:10,000
interface. Okay, but how are we going to

18
00:01:10,000 --> 00:01:14,000
calculate the page number? Well, infinite queries have a function

19
00:01:14,000 --> 00:01:18,000
for that. So here we should implement a function called get

20
00:01:18,000 --> 00:01:22,000
next page param. We should set this to a function

21
00:01:22,000 --> 00:01:26,000
with two parameters. The first parameter is last page

22
00:01:26,000 --> 00:01:30,000
which is an array of posts, so last page.

23
00:01:30,000 --> 00:01:34,000
The second parameter is all pages which is a two dimensional array

24
00:01:34,000 --> 00:01:38,000
of posts. So here we have an array and each element in this array

25
00:01:38,000 --> 00:01:42,000
is an array of posts. So this parameter

26
00:01:42,000 --> 00:01:46,000
all pages contains the data for all pages, okay?

27
00:01:46,000 --> 00:01:50,000
Now in this function we should return the next page

28
00:01:50,000 --> 00:01:54,000
number. So if you're on page one we should return two. Now how

29
00:01:54,000 --> 00:01:58,000
can we calculate this? Well, I told you that all pages contains

30
00:01:58,000 --> 00:02:02,000
the data for all pages. So if you're on page one, we have a

31
00:02:02,000 --> 00:02:06,000
single element in this array, right? So we can return

32
00:02:06,000 --> 00:02:10,000
all pages.length plus one as

33
00:02:10,000 --> 00:02:14,000
the next page number. Now at some point we're going to reach

34
00:02:14,000 --> 00:02:18,000
the end of our list. We don't want to increment the page number forever, right?

35
00:02:18,000 --> 00:02:22,000
How can we do that? Well, the implementation varies from one backend to another

36
00:02:22,000 --> 00:02:26,000
with json placeholder, if we ask data for a page that doesn't

37
00:02:26,000 --> 00:02:30,000
exist, we get an empty array. So at some point, last page

38
00:02:30,000 --> 00:02:34,000
is going to be an empty array. So here we can type an expression like

39
00:02:34,000 --> 00:02:38,000
if last page.length is greater than zero

40
00:02:38,000 --> 00:02:42,000
we return all pages.length plus one, otherwise

41
00:02:42,000 --> 00:02:46,000
we return undefined to indicate that we have reached

42
00:02:46,000 --> 00:02:50,000
the end of the list. This is not the ideal way to implement this logic, but that's

43
00:02:50,000 --> 00:02:54,000
the best I can think of with json placeholder. A good API should return

44
00:02:54,000 --> 00:02:58,000
the total number of records ahead of time so we can calculate how many

45
00:02:58,000 --> 00:03:02,000
pages we have and when we'll hit the last page. So this

46
00:03:02,000 --> 00:03:06,000
is how we calculate the next page number. Now when the user clicks

47
00:03:06,000 --> 00:03:10,000
on the load more button, react query calls this function to get the

48
00:03:10,000 --> 00:03:14,000
next page number. Then it will pass the page number

49
00:03:14,000 --> 00:03:18,000
to our query function. So here we should add a parameter and destructure

50
00:03:18,000 --> 00:03:22,000
it to grab the page param. So page param

51
00:03:22,000 --> 00:03:26,000
is a property in the object that react query will pass

52
00:03:26,000 --> 00:03:30,000
to our query function. So now we should replace query.page with

53
00:03:30,000 --> 00:03:34,000
page param. Now as a

54
00:03:34,000 --> 00:03:38,000
best practice we should initialize this to one so we get the data for the first

55
00:03:38,000 --> 00:03:42,000
page. So we're done here, now back to our component,

56
00:03:42,000 --> 00:03:46,000
we're getting a number of errors because we removed our page

57
00:03:46,000 --> 00:03:50,000
variable. First let's remove the previous button.

58
00:03:50,000 --> 00:03:54,000
Now for our next button we should change the label to load

59
00:03:54,000 --> 00:03:58,000
more. Now here we're not going to increment the page number,

60
00:03:58,000 --> 00:04:02,000
instead we should tell react query to fetch the next page. How

61
00:04:02,000 --> 00:04:06,000
do we do that? Very easy. The infinite query that is returned from our hook

62
00:04:06,000 --> 00:04:10,000
has a function called fetch next page.

63
00:04:10,000 --> 00:04:14,000
So down here when the button is clicked

64
00:04:14,000 --> 00:04:18,000
all we have to do is call fetch next page.

65
00:04:18,000 --> 00:04:22,000
At this point react query will call

66
00:04:22,000 --> 00:04:26,000
get next page param to calculate the next page number and then

67
00:04:26,000 --> 00:04:30,000
it will pass it to our query function. Now

68
00:04:30,000 --> 00:04:34,000
we want to disable this button while we're fetching the next page.

69
00:04:34,000 --> 00:04:38,000
To do that we should grab a boolean property here

70
00:04:38,000 --> 00:04:42,000
that is called is fetching, or is fetching

71
00:04:42,000 --> 00:04:46,000
next page. Now here we can say

72
00:04:46,000 --> 00:04:50,000
our button should be disabled if we are fetching

73
00:04:50,000 --> 00:04:54,000
the next page. Okay, now we can make the label

74
00:04:54,000 --> 00:04:58,000
dynamic, so if we are fetching the next page we can return

75
00:04:58,000 --> 00:05:02,000
loading with dot dot dot otherwise load

76
00:05:02,000 --> 00:05:06,000
more. That's nicer. So this is our button,

77
00:05:06,000 --> 00:05:10,000
now we have another error here, because the data object that

78
00:05:10,000 --> 00:05:14,000
we get from this infinite query is no longer an array of posts,

79
00:05:14,000 --> 00:05:18,000
it's an instance of infinite data. In this object

80
00:05:18,000 --> 00:05:22,000
we have a couple of properties, one is page params, the other

81
00:05:22,000 --> 00:05:26,000
is pages, which contains the data for all pages. So

82
00:05:26,000 --> 00:05:30,000
instead of iterating over this to get all posts, we should loop over

83
00:05:30,000 --> 00:05:34,000
the pages and render the data for each page separately.

84
00:05:34,000 --> 00:05:38,000
So, up here, let's write an expression and say

85
00:05:38,000 --> 00:05:42,000
data.pages, we map this, here we map

86
00:05:42,000 --> 00:05:46,000
each page to a container, now we don't want to render a div

87
00:05:46,000 --> 00:05:50,000
in the middle of an unordered list, so here we can use

88
00:05:50,000 --> 00:05:54,000
a react.fragment, now we should import

89
00:05:54,000 --> 00:05:58,000
react on the top, okay, so for each

90
00:05:58,000 --> 00:06:02,000
page we add a fragment, and then within that page

91
00:06:02,000 --> 00:06:06,000
we render the list items, so we map each page,

92
00:06:06,000 --> 00:06:10,000
now we get a post object, so this page, if you hover

93
00:06:10,000 --> 00:06:14,000
over it you can see it's an array of posts, so we get each

94
00:06:14,000 --> 00:06:18,000
post and then map it to a list item, so I'm

95
00:06:18,000 --> 00:06:22,000
going to grab these few lines and paste them

96
00:06:22,000 --> 00:06:26,000
right here. Now let's remove the second expression,

97
00:06:26,000 --> 00:06:30,000
save, so here's the end result, we go to data.pages

98
00:06:30,000 --> 00:06:34,000
and map each page to a react fragment, now because

99
00:06:34,000 --> 00:06:38,000
we're using a map here we should always set the key, now the page

100
00:06:38,000 --> 00:06:42,000
is an array so we cannot use it as a key, so here we need to add

101
00:06:42,000 --> 00:06:46,000
a second parameter, that is our index, and we use that as

102
00:06:46,000 --> 00:06:50,000
the key. Now inside this fragment we map each

103
00:06:50,000 --> 00:06:54,000
page which is an array of posts to a bunch of list items.

104
00:06:54,000 --> 00:06:58,000
Now let's test our implementation, so back in the browser,

105
00:06:58,000 --> 00:07:02,000
here's our button, click, beautiful!

106
00:07:02,000 --> 00:07:06,000
So this is how we can implement infinite queries with React Query.

